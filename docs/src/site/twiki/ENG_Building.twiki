<noautolink>

[[index][::Go back to Oozie Documentation Index::]]

---+!! Building Oozie

%TOC%

---++ System Requirements

   * Unix box (tested on Mac OS X or Linux)
   * Subversion client 1.5+
   * Java JDK 1.6+
   * [[http://maven.apache.org/][Maven 2.0.8+]]
   * [[http://hadoop.apache.org/core/releases.html][Hadoop 0.20+]]
   * [[http://hadoop.apache.org/pig/releases.html][Pig 0.2+]]

The Subversion command (svn) should be in the command path.

The Java commands (java, javac) should be in the command path.

The Maven command (mvn) should be in the command path.

Hadoop should be installed and tested that is working fine ([[ENG_HadoopQuickInstall][Hadoop Quick Install]]).

---++ Getting Oozie Source Code

Check out the source code from Subversion at <code><OOZIE_SVN_URL></code> using the =svn= command execute:

<verbatim>
$ svn co <OOZIE_SVN_URL> oozie
</verbatim>

#InitialMavenSetup
---++ Initial Maven Setup

There are a few Oozie dependencies that are not available in public Maven repositories, they have to be installed
locally.

To generate the documentation, Oozie uses a patched Doxia plugin for Maven.

To install prepare your development environment to build Oozie, run the following scripts:

<verbation>
$ build-setup/setup-maven.sh
</verbatim>

<verbation>
$ build-setup/setup-jars.sh
</verbatim>

The first script will install a modified documentation plugin with improved twiki support.

The second script will install in the local Maven repository the JARs that are not available in public Maven
repositories.

#SshSetup
---++ Passphare-less SSH Setup

To run SSH Testcases and for easier Hadoop start/stop configure SSH to localhost to be passphrase-less.

Create your SSH keys without a passphrase and add the public key to the authorized file:

<verbatim>
$ ssh-keygen -t dsa
$ cat ~/.ssh/id_dsa.pub >> ~/.ssh/authorized_keys2
</verbatim>

Test that you can ssh without password:

<verbatim>
$ ssh localhost
</verbatim>

*For paranoid people:* Create the SSH key with a passphrase and use =ssh-agent=.

---++ Developing and Building Oozie with Different Versions of Hadoop and Pig

Due to Hadoop and Pig API changes and Hadoop RPC protocol constraints Oozie has to be built for a specific version of
Hadoop and Pig.

The default build is for the current version of Hadoop and the corresponding version of Pig. Hadoop and Pig JARs
must be seeded in the local Maven repository (modify and use the =build-setup/setup-maven.sh= script mentioned in the
[[ENG_Building#InitialMavenSetup][Initial Maven Setup]] section).

Usage:

<verbatim>
$ mvn <MAVEN_GOALS>
</verbatim>

To build Oozie for a different versions of Hadoop and Pig; the corresponding Hadoop, Hadoop streaming and Pig
JARs must be available in a Maven repository o in the local Maven cache (modify and use the =build-setup/setup-maven.sh=
script mentioned in the [[ENG_Building#InitialMavenSetup][Initial Maven Setup]] section).

The 'hadoopVersion' and 'pigVersion' properties must be specified when invoking Maven. For example:

<verbatim>
$ mvn clean compile -DhadoopVersion=0.20.0 -DpigVersion=0.2.0-H20-J660
</verbatim>

To make an Oozie build that includes the MySQL JDBC driver, the =-Dmysql= option must be used. Also JDBC configuration 
needs to be specified in oozie-site.xml For example:

<verbatim>
$ mvn clean compile -DhadoopVersion=0.20.0 -DpigVersion=0.2.0-H20-J660 -Dmysql -Doozie.config.file=mysql-oozie-site.xml
</verbatim>

---++ Compiling Oozie

From the =oozie= root source directory execute the following Maven command:

<verbatim>
$ mvn clean compile
</verbatim>

The first time Oozie is built Maven will download and cache all necessary dependency JARs in the local Maven repository.

---++ Running Oozie Testcases

Make sure that Hadoop is up and running, the JobTracker should be running in =localhost:9001=, the
Namenode should be running in port =hdfs://localhost:9000=. Refer to [[ENG_HadoopQuickInstall][Hadoop Quick Install]]
documentation for details on how to quickly install Hadoop.

From the =oozie= root source directory execute the following Maven command:

<verbatim>
$ mvn clean test
</verbatim>

Test data is created under the =/tmp/oozietests/= directory, to change the location of the =oozietests= directory
use the =-Doozie.test.dir= Maven system property when running testcases.

For example, from the =oozie= root source directory execute the following Maven command:

<verbatim>
$ mvn clean test -Doozie.test.dir=/home/tucu/tmp
</verbatim>

If Hadoop is running in another host or port it should be specified via the =oozie.test.job.tracker=
and =oozie.test.name.node= Maven system properties.

For example, from the =oozie= root source directory execute the following Maven command:

<verbatim>
$ mvn clean test -Doozie.test.job.tracker=foo.com:10001 -Doozie.test.name.node=bar.com:10000
</verbatim>

---++ Running Oozie Testcases with Additional JARs (i.e.Hadoop Streaming and Pig)

Oozie build environment has the Hadoop streaming and Pig jars in its test classpath.

Refer to the =TestMapReduceActionExecutor= and =TestPigActionExecutor= test cases for examples on how to do this.

If needing an additional JAR file, the JAR artifact has to be added to the =core= module =pom.xml= as a =test= scope
dependency.

---++ Running a Single Oozie Testcase

To run one testcase, from the =oozie= root source directory, execute the following Maven command:

<verbatim>
$ mvn clean test -Dtest=<TEST_CASE_CLASS_NAME>
</verbatim>

For example:

<verbatim>
$ mvn clean test -Dtest=TestHadoopActionHandler
</verbatim>

---++ Generating Oozie Testcases Coberage Report

To generate testcases coberage report execute the following Maven commands:

<verbatim>
$ mvn clean install -DskipTests
$ mvn cobertura:cobertura
</verbatim>

The report is generated at =core/target/site/cobertura/index.html=.

---++ Building an Oozie Distribution, Different Hadoop Versions, Different DBs

The =bin/mkdistro.sh= script generates an Oozie distro.

Built distros will be available in the =distro/target/= directory.

For example to build an Oozie distribution for a specific version of Hadoop and Pig execute the =mkdistro.sh= command
with the following options:

<verbatim>
$ bin/mkdistro.sh [-full] -Dhadoop=<HADOOP_VERSION> -Dpig=<PIG_VERSION> [-Dmysql -Dooozie.config.file=mysql-oozie-site.xml]
</verbatim>

The =-full= option, if specified will generate the cobertura and depedencies reports.
(TODO: generate test and findbugs reports)

---++ Oozie Version Numbers

The full version number of an Oozie build is tied to the Hadoop version number it works with.

This serves 2 purposes:

   * Identifies the version of Hadoop that an Oozie distro/instance works with.
   * Gives different versions to Oozie JARs thus allowing them to be properly identified by build tools (Maven, Ivy).

The Oozie version format is <code><OOZIE_VERSION>-<HADOOP_VERSION>[--<BUILD>]</code>.

The =OOZIE_VERSION= indicates the Oozie version.

The =HADOOP_VERSION= indicates the Hadoop version.

The =BUILD= can be be used to specify SNAPSHOT developer builds or a particular build.

For example: <code>0.1-0.20.0--SNAPSHOT</code>

This 3 components of the Oozie version are controlled from Oozie main POM.

[[index][::Go back to Oozie Documentation Index::]]

</noautolink>
