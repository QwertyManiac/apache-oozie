<noautolink>

[[index][::Go back to Oozie Documentation Index::]]

---+!! Oozie Install

%TOC%

---++ System Requirements

   * Unix (tested with  RHEL4, RHEL5 and Mac OS X)
   * Java JRE 1.6+
   * [[http://tomcat.apache.org][Tomcat 6.x]] (tested with 6.0.18)
   * [[http://www.mysql.com][MySQL 5.1.*]] (tested with 5.1.24.6)

---++ Unix Setup

Create a Unix user account, referred as <code><OOZIE_USER></code> in this documentation, that will be used to run
Oozie's Tomcat.

Configure the shell of the <code><OOZIE_USER></code> account to have Java JRE 1.6+ in the =PATH=.

Test that the Java version, 1.6+, is available with the =java -version= command.

---++ SSH Setup

*NOTE: SSH actions are deprecated in Oozie schema 0.1, and removed in Oozie schema 0.2*

Create SSH keys for the <code><OOZIE_USER></code> account.

<verbatim>
$ ssh-keygen -t dsa
</verbatim>

If the SSH keys has been generated with a non-empty passphrase make sure the =ssh-agent= is always running for the
<code><OOZIE_USER></code> account.

The SSH public key <code><OOZIE_USER>/.ssh/id_dsa.pub</code> has to be made available to be installed in boxes that
will execute remote SSH actions from workflow jobs in the <code>~/.ssh/authorized_keys2</code> of the remote Unix box
that will execute the SSH command.

Test installing the SSH public key in a remote, perform a SSH login from the Oozie to the remote box using the user
under which the SSH public keys have been installed. A password should not be asked.

---++ MySQL Setup

Install MySQL and create a MySQL account, referred as <code><DB_OOZIE_USER></code>. Give permissions to create schemas
plus all SQL permissions.

For example:

<verbatim>
$ mysql -u root
.
mysql> grant all privileges on oozie.* to 'oozie'@'localhost' identified by 'oozie';
Query OK, 0 rows affected (0.03 sec)
.
mysql> exit
Bye
</verbatim>

*IMPORTANT:* If the Oozie distro does not include the MSQL JDBC driver (the Apache distro does not), the =oozie.war=
web application must be patched with it. Otherwise, the MySQL JDBC driver will not be present and Oozie will fail to
work.

---++ Tomcat Setup

Install Tomcat and configure it to run under the <code><OOZIE_USER></code> Unix account.

Tomcat must run using Java JRE 1.6+.

Start Tomcat and test it is working by accessing its root page.

---++ Oozie Distro Setup

Get the Oozie MySQL distro for the Hadoop cluster version.

*IMPORTANT:* The Oozie distro being installed must be for the exact same version of Hadoop cluster that Oozie will be
working with. This is because the Hadoop RPC protocol requires the exact same version on the client side.

Expand the distro in the <code><OOZIE_USER></code>'s home directory. Soft link the expanded directory to =oozie=.

Add =~/oozie/bin= to the =PATH= of the shell.

---++ Oozie Server and Documentation Setup

If present, delete the old =oozie.war= and =ooziedocs.war= files, and =oozie= and =ooziedocs= directories from
Tomcat's =webapps/= directory.

Copy the =~/oozie/wars/oozie.war= and the =~/oozie/wars/ooziedocs.war= files to Tomcat's =webapps/= directory.

---++ Oozie Configuration

In most cases, for a production setup Oozie configuration will read from a configuration directory instead of the
classpath, refer to the [[AG_ConfigurationFiles][Oozie configuration files]] document for detail on how to setup Oozie
to read its configuration from a directory.

---+++ Oozie Database Configuration

Configuration file: =~/oozie/conf/oozie-site.xml=

Default JDBC driver class, JDBC URL, DB user name and DB user password are for HSQL.

To use MySQL set the following properties:

<verbatim>
    ...
   <property>
        <name>oozie.service.DataSourceService.jdbc.driver</name>
        <value>com.mysql.jdbc.Driver</value>
        <description>
            JDBC driver class.
        </description>
    </property>
    <property>
        <name>oozie.service.DataSourceService.jdbc.url</name>
        <value>jdbc:mysql://localhost:3306</value>
        <description>
            JDBC URL.
        </description>
    </property>
    <property>
        <name>oozie.service.DataSourceService.jdbc.username</name>
        <value>oozie</value>
        <description>
            DB user name.
        </description>
    </property>
    <property>
        <name>oozie.service.DataSourceService.jdbc.password</name>
        <value>oozie</value>
        <description>
            DB user password.
            IMPORTANT: if password is emtpy leave a 1 space string, the service trims the value, if empty Configuration
                       assumes it is NULL.
        </description>
    </property>
    ...
</verbatim>

If for security reasons the database user password cannot be written in the configurationf file. Set the following
configuration property to =true= (default value is =false= ):

<verbatim>
    ...
    <property>
        <name>oozie.service.DataSourcePasswordService.password.from.console</name>
        <value>true</value>
        <description>
            Indicates if the password for the datasource has to be asked interactively in the console starting the
            servlet container at Oozie start up time.
        </description>
    </property>
    ...
</verbatim>

Then, the =oozie.service.DataSourceService.jdbc.password= property in the configuration file will be ignored and the
DB user password will be asked from the shell Oozie server (Tomcat) is started.

---+++ Oozie System ID Configuration

Configuration file: =~/oozie/conf/oozie-site.xml=

Oozie has a system ID that is is used to generate the Oozie temporary runtime directory, the workflow job IDs, and the
workflow action IDs.

Two Oozie systems running with the same ID will not have any conflict but in case of troubleshooting it will be easier
to identify resources created/used by the different Oozie systems if they have different system IDs.

The default value for the Oozie system ID is:

<verbatim>
    ...
    <property>
        <name>oozie.system.id</name>
        <value>oozie-${user.name}</value>
        <description>
            The Oozie system ID.
        </description>
    </property>
    ...
</verbatim>

---+++ Oozie URL Configuration

Oozie needs to know its public base URL <code>SCHEME ://HOST:PORT/CONTEXT</code>. This base URL is used to
create callback URLs for actions and the console URL for Oozie workflow jobs. As Oozie could be running behind a load
balancer or dynamic DNS it is important that this property is set to the public host name and port number.

<verbatim>
    ...
    <property>
        <name>oozie.base.url</name>
        <value>http://localhost:8080/oozie</value>
        <description>
             Base Oozie URL.
        </description>
    </property>
    ...
</verbatim>

---+++ Oozie Security Configuration

Configuration files: =~/oozie/conf/oozie-site.xml= and =~/oozie/conf/oozie-log4j.properties=

Oozie Security is explained in [[AG_Security][Oozie Security]].

To enable security set the following property:

<verbatim>
    ...
    <property>
        <name>oozie.service.AuthorizationService.security.enabled</name>
        <value>true</value>
        <description>
            Specifies whether security is to be disabled while running Ooozie.
        </description>
    </property>
    ...
</verbatim>

Note that by default this property is disabled.

Add to the =~/oozie/conf/adminusers.txt= file all the users that will have admin privileges in Oozie. One user name per
line. Empty lines and lines starting with '#' are ignored.

---+++ Oozie Logging Configuration

Configuration file: =~/oozie/conf/oozie-log4j.properties=

Oozie logs to different log files, this is explained in [[AG_Logging][Oozie Logging]].

Set the desired Logging levels to the different logger categories.

*IMPORTANT:* The logger category =oozie= must use the =DailyRollingFileAppender= appender and it must be configured
for daily or hourly (default and recommended) rolling.

---++ Oozie Database Creation

Oozie server can be started with an option to create the Oozie database if it does not exist.

This is done by starting Oozie server (Tomcat) with the Java System property <code>oozie.db.schema.create=true</code>.

This property can also be set in Oozie configuration file.

<verbatim>
    ...
    <property>
        <name>oozie.db.schema.create</name>
        <value>false</value>
        <description>
            Creates Oozie DB.
            If set to true, it creates the DB schema if it does not exist. If the DB schema exists is a NOP.
            If set to false, it does not create the DB schema. If the DB schema does not exist it fails start up.
        </description>
    </property>
    ...
</verbatim>

However, in a production system, it is recommended to disable automatic DB creation not to miss a database lost.

If automatic DB creation is disabled, the steps to create it are:

<verbatim>
$ export CATALINA_OPTS="-Doozie.config.dir=/home/<OOZIE_USER>/oozie/conf -Doozie.db.schema.create=true"
$ catalina.sh run
</verbatim>

*IMPORTANT:* Do not start Tomcat with the =start= command. Tomcat must be started with the =run= command if the
database password is configured to be asked on the console. After the database password is set, Tomcat will go on
background mode itself.

*IMPORTANT:* The "-Doozie.config.dir=" Java system property must be set to the Oozie configuration directory, the
 =~/oozie/conf/= directory for the <code><OOZIE_USER></code>.

Check the Oozie log file =oozie.log= to ensure Oozie started successfully and the database was created.

Stop Tomcat from another terminal using the command:

<verbatim>
$ catalina.sh stop
</verbatim>

---++ Normal Oozie System Startup

Follow the instructions at [[AG_StartStop][Oozie Start and Stop]].

[[index][::Go back to Oozie Documentation Index::]]

</noautolink>
